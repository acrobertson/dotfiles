# Add things to the PATH
export PATH=/opt/homebrew/opt/mysql@5.7/bin:$PATH # MySQL 5.7
export PATH=~/.composer/vendor/bin:$PATH          # Composer
export PATH="$HOME/.emacs.d/bin:$PATH"            # doom emacs

# pnpm
export PNPM_HOME="/Users/alecrobertson/Library/pnpm"
export PATH="$PNPM_HOME:$PATH"
# pnpm end

# nvm
export NVM_DIR="$HOME/.nvm"

export EDITOR="vi -e"
export VISUAL=nvim

# Init antigen
source /opt/homebrew/share/antigen/antigen.zsh

# Load the oh-my-zsh's library.
antigen use oh-my-zsh

# Plugins
antigen bundles <<EOBUNDLES
	# Bundles from the default repo (robbyrussell's oh-my-zsh)
	# emacs
	direnv
	git
	macos
	npm
	rust
	wp-cli
	vscode

	# GitHub Plugins
	djui/alias-tips
	ntnyq/omz-plugin-pnpm@main
	zsh-users/zsh-autosuggestions
	zsh-users/zsh-completions
	zsh-users/zsh-syntax-highlighting

	# Custom Plugins
	deno
EOBUNDLES

# Load the theme.
antigen theme robbyrussell

# Tell Antigen that you're done.
antigen apply

### Aliases ###

# chezmoi
alias cm="chezmoi"
alias cma="cm add"
alias cmc="cm cd"
alias cmd="cm diff"
alias cme="cm edit"

# Use `lsd` over default `ls`
alias ls="lsd"
alias l="ls -lah"
alias la="ls -lAh"
alias ll="ls -lh"
alias lt="ls --tree --ignore-glob 'node_modules' --ignore-glob 'vendor'"

## zellij
alias zj="zellij"

# Changed your .gitignore _after_ you have added / committed some files?
# run `gri` to untrack anything in your updated .gitignore
alias gri="git ls-files --ignored --exclude-standard | xargs -0 git rm -r"

# Open all merge conflicts or currently changed files in VS Code
alias fix="git diff --name-only | uniq | xargs code"

# fzf
alias preview="fzf --preview 'bat --color \"always\" {}'"

nf() {
  nvim $(fzf --preview "bat --color 'always' {}")
}

# brew services
alias bsl="brew services list"

# load nvm
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# nvm auto-use
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# vterm helpers
vterm_printf(){
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

# Init zoxide
eval "$(zoxide init zsh)"

# Init prompt
eval "$(starship init zsh)"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
